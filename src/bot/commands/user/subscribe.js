const contact = require("../requiredContact");
const User = require("../../../models/user");
const isUserSubscribed = require("../../middlewares/isUserSubscribed");

const checkUserSubscribtion = async (ctx, channel) => {
  try {
    const chatMember = await ctx.telegram.getChatMember(
      "@" + channel,
      ctx.from.id,
    );

    if (chatMember.status === "left" || chatMember.status === "kicked") {
      return true;
    }

    return false;
  } catch (error) {
    console.error("–•–∞—Ç–æ–ª–∏–∫:", { error });
    throw new Error(error);
  }
};

const subscribe = async (ctx) => {
  try {
    const channel = ctx.callbackQuery.data.split("_")[1];
    const user = await User.findOne({ telegramId: ctx.from.id });

    if (!user) {
      return await contact(ctx);
    }

    const isSubscribed = await checkUserSubscribtion(ctx, channel);

    if (isSubscribed) {
      return await ctx.answerCbQuery("–°–∏–∑ –∫–∞–Ω–∞–ª–≥–∞ –æ–±—É–Ω–∞ –±—û–ª–∏—à–∏–Ω–≥–∏–∑ –∫–µ—Ä–∞–∫");
    }

    user.channels = [...user.channels, channel];

    await user.save();

    ctx.user = user;

    const res = await isUserSubscribed(ctx, user);

    if (res) {
      return;
    }

    await ctx.deleteMessage();
    return await ctx.answerCbQuery(
      "–°–∏–∑ –∫–∞–Ω–∞–ª–≥–∞ –æ–±—É–Ω–∞ –±—û–ª–∏–Ω–≥–∏–∑, —Ä–∞—Ö–º–∞—Ç! –û–≤–æ–∑ –±–µ—Ä–∏—à–¥–∞ –¥–∞–≤–æ–º —ç—Ç–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω.\n\nüîî –≠—Å–ª–∞—Ç–º–∞: –ê–≥–∞—Ä–¥–∞ –∫–∞–Ω–∞–ª–ª–∞—Ä–¥–∞–Ω —á–∏“õ–∏–± –∫–µ—Ç—Å–∞–Ω–≥–∏–∑ –æ–≤–æ–∑–ª–∞—Ä–∏–Ω–≥–∏–∑ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–∞–¥–∏!",
      { show_alert: true, cache_time: 1, is_personal: true },
    );
  } catch (error) {
    console.error("–•–∞—Ç–æ–ª–∏–∫:", { error });
    await ctx.answerCbQuery("–•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ö–∞–π—Ç–∞–¥–∞–Ω —É—Ä–∏–Ω–∏–± –∫—ÉÃÜ—Ä–∏–Ω–≥");
  }
};

module.exports = subscribe;
